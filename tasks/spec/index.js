global.options = { };

describe('xTuple Installer', function () {
  var assert = require('chai').assert,
    exec = require('execSync').exec,
    _ = require('underscore'),
    path = require('path'),
    fs = require('fs'),
    pgcli = require('../../lib/pg-cli'),
    pgPhase = require('../pg'),
    getOptions = function ($k) {
      return {
        quiet: true,
        xt: {
          edition: 'core',
          name: 'xt' + $k,
          setupdemos: true,
          adminpw: '123',
          build_common: { },
          build_main: { },
          database: { },
          serverconfig: { },
          testconfig: { },
          clone: { }
        },
        nginx: {
          domain: 'localhost',
          // mock; generated by nginx.ssl#beforeTask
          site: { },
          ssl: { }
        },
        pg: {
          version: process.env.XT_PG_VERSION,
          host: 'localhost',
          mode: 'test',
          snapshotcount: 7,
          cluster: { },
          snapshotmgr: { },
          tuner: { },
          hba: { },
          config: {
            slots: 1,
            shared_buffers: 128,
            temp_buffers: 8,
            max_connections: 8,
            work_mem: 1,
            maintenance_work_mem: 8,
            locale: 'en_US.UTF-8'
          }
        },
        sys: {
          service: { },
          cups: { },
          policy: { },
          paths: { }
        }
      };
    };

  global.baseClusterInstallPlan = [
    {name: 'sys', tasks: [ 'paths', 'policy' ]},
    {name: 'xt', tasks: [ 'clone' ]},
    {name: 'pg', tasks: [ 'config', 'cluster' ]},
    {name: 'nginx', tasks: [ 'ssl' ]},
    {name: 'pg', tasks: [ 'hba', 'tuner' ]},
    {name: 'xt', tasks: [ 'database', 'serverconfig' ]}
  ];

  global.baseAppInstallPlan = [
    {name: "xt", tasks: [ 'build_common' ] }
  ];

  global.mainAppInstallPlan = [
    {name: "xt", tasks: [ 'build_main' ] }
  ];

  global.fullInstallPlan = [
    {name: 'sys', tasks: [ 'etchosts', 'cups', 'service' ]},
    {name: 'pg', tasks: [ 'snapshotmgr' ]}
  ];

  before(function () {
    try {
      fs.unlinkSync(path.resolve(process.cwd(), 'install.log'));
    }
    catch (e) {

    }
  });

  before(function () {
    global.options = getOptions(
      Math.round((Math.random() * 2e16)).toString(36).replace(/[0-9]/g, '')
    );
  });
  beforeEach(function () {
    global.options = getOptions(
      Math.round((Math.random() * 2e16)).toString(36).replace(/[0-9]/g, '')
    );
  });

  afterEach(function () {
    try {
      pgcli.dropcluster({ name: global.options.xt.name, version: global.options.pg.version });
    }
    catch (e) {
      // sometimes a cluster is not built, but we want to always at least try
      // to clean it up. so ignore any errors
    }
  });

  it('must run with root privileges', function () {
    assert(
      exec('id -u').stdout.indexOf('0') === 0,
      'installer tests must be run with sudo'
    );
  });
  it('must set XT_PG_VERSION environment variable', function () {
    assert.include([ '9.1', '9.3' ], process.env.XT_PG_VERSION);
  });

  require('./sys');
  require('./pg');
  require('./nginx');
  require('./xt');
});
